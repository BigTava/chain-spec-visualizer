
Pallet: Balances
  Function: transfer_allow_death
    Docs: Transfer some liquid free balance to another account.  `transfer_allow_death` will set the `FreeBalance` of the sender and receiver. If the sender's account is below the existential deposit as a result of the transfer, the account will be reaped.  The dispatch origin for this call must be `Signed` by the transactor.
    Parameters:
      - dest: sp_runtime::multiaddress::MultiAddress
      - value: unknown

Pallet: Balances
  Function: force_transfer
    Docs: Exactly as `transfer_allow_death`, except the origin must be root and the source account may be specified.
    Parameters:
      - source: sp_runtime::multiaddress::MultiAddress
      - dest: sp_runtime::multiaddress::MultiAddress
      - value: unknown

Pallet: Balances
  Function: transfer_keep_alive
    Docs: Same as the [`transfer_allow_death`] call, but with a check that the transfer will not kill the origin account.  99% of the time you want [`transfer_allow_death`] instead.  [`transfer_allow_death`]: struct.Pallet.html#method.transfer
    Parameters:
      - dest: sp_runtime::multiaddress::MultiAddress
      - value: unknown

Pallet: Balances
  Function: transfer_all
    Docs: Transfer the entire transferable balance from the caller account.  NOTE: This function only attempts to transfer _transferable_ balances. This means that any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be transferred by this function. To ensure that this function results in a killed account, you might need to prepare the account by removing any reference counters, storage deposits, etc...  The dispatch origin of this call must be Signed.  - `dest`: The recipient of the transfer. - `keep_alive`: A boolean to determine if the `transfer_all` operation should send all   of the funds the account has, causing the sender account to be killed (false), or   transfer everything except at least the existential deposit, which will guarantee to   keep the sender account alive (true).
    Parameters:
      - dest: sp_runtime::multiaddress::MultiAddress
      - keep_alive: Bool

Pallet: Balances
  Function: force_unreserve
    Docs: Unreserve some balance from a user by force.  Can only be called by ROOT.
    Parameters:
      - who: sp_runtime::multiaddress::MultiAddress
      - amount: U128

Pallet: Balances
  Function: upgrade_accounts
    Docs: Upgrade a specified account.  - `origin`: Must be `Signed`. - `who`: The account to be upgraded.  This will waive the transaction fee if at least all but 10% of the accounts needed to be upgraded. (We let some not have to be upgraded just in order to allow for the possibility of churn).
    Parameters:
      - who: unknown

Pallet: Balances
  Function: force_set_balance
    Docs: Set the regular balance of a given account.  The dispatch origin for this call is `root`.
    Parameters:
      - who: sp_runtime::multiaddress::MultiAddress
      - new_free: unknown

Pallet: Balances
  Function: force_adjust_total_issuance
    Docs: Adjust the total issuance in a saturating way.  Can only be called by root and always needs a positive `delta`.  # Example
    Parameters:
      - direction: pallet_balances::types::AdjustmentDirection
      - delta: unknown

Pallet: Balances
  Function: burn
    Docs: Burn the specified liquid free balance from the origin account.  If the origin's account ends up below the existential deposit as a result of the burn and `keep_alive` is false, the account will be reaped.  Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible, this `burn` operation will reduce total issuance by the amount _burned_.
    Parameters:
      - value: unknown
      - keep_alive: Bool

Pallet: Utility
  Function: batch
    Docs: Send a batch of dispatch calls.  May be called from any origin except `None`.  - `calls`: The calls to be dispatched from the same origin. The number of call must not   exceed the constant: `batched_calls_limit` (available in constant metadata).  If origin is root then the calls are dispatched without checking origin filter. (This includes bypassing `frame_system::Config::BaseCallFilter`).  ## Complexity - O(C) where C is the number of calls to be batched.  This will return `Ok` in all circumstances. To determine the success of the batch, an event is deposited. If a call failed and the batch was interrupted, then the `BatchInterrupted` event is deposited, along with the number of successful calls made and the error of the failed call. If all were successful, then the `BatchCompleted` event is deposited.
    Parameters:
      - calls: unknown

Pallet: Utility
  Function: as_derivative
    Docs: Send a call through an indexed pseudonym of the sender.  Filter from origin are passed along. The call will be dispatched with an origin which use the same filter as the origin of this call.  NOTE: If you need to ensure that any account-based filtering is not honored (i.e. because you expect `proxy` to have been used prior in the call stack and you do not want the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1` in the Multisig pallet instead.  NOTE: Prior to version *12, this was called `as_limited_sub`.  The dispatch origin for this call must be _Signed_.
    Parameters:
      - index: U16
      - call: people_polkadot_runtime::RuntimeCall

Pallet: Utility
  Function: batch_all
    Docs: Send a batch of dispatch calls and atomically execute them. The whole transaction will rollback and fail if any of the calls failed.  May be called from any origin except `None`.  - `calls`: The calls to be dispatched from the same origin. The number of call must not   exceed the constant: `batched_calls_limit` (available in constant metadata).  If origin is root then the calls are dispatched without checking origin filter. (This includes bypassing `frame_system::Config::BaseCallFilter`).  ## Complexity - O(C) where C is the number of calls to be batched.
    Parameters:
      - calls: unknown

Pallet: Utility
  Function: dispatch_as
    Docs: Dispatches a function call with a provided origin.  The dispatch origin for this call must be _Root_.  ## Complexity - O(1).
    Parameters:
      - as_origin: people_polkadot_runtime::OriginCaller
      - call: people_polkadot_runtime::RuntimeCall

Pallet: Utility
  Function: force_batch
    Docs: Send a batch of dispatch calls. Unlike `batch`, it allows errors and won't interrupt.  May be called from any origin except `None`.  - `calls`: The calls to be dispatched from the same origin. The number of call must not   exceed the constant: `batched_calls_limit` (available in constant metadata).  If origin is root then the calls are dispatch without checking origin filter. (This includes bypassing `frame_system::Config::BaseCallFilter`).  ## Complexity - O(C) where C is the number of calls to be batched.
    Parameters:
      - calls: unknown

Pallet: Utility
  Function: with_weight
    Docs: Dispatch a function call with a specified weight.  This function does not check the weight of the call, and instead allows the Root origin to specify the weight of the call.  The dispatch origin for this call must be _Root_.
    Parameters:
      - call: people_polkadot_runtime::RuntimeCall
      - weight: sp_weights::weight_v2::Weight

Pallet: Identity
  Function: add_registrar
    Docs: Add a registrar to the system.  The dispatch origin for this call must be `T::RegistrarOrigin`.  - `account`: the account of the registrar.  Emits `RegistrarAdded` if successful.
    Parameters:
      - account: sp_runtime::multiaddress::MultiAddress

Pallet: Identity
  Function: set_identity
    Docs: Set an account's identity information and reserve the appropriate deposit.  If the account already has identity information, the deposit is taken as part payment for the new deposit.  The dispatch origin for this call must be _Signed_.  - `info`: The identity information.  Emits `IdentitySet` if successful.
    Parameters:
      - info: people_polkadot_runtime::people::IdentityInfo

Pallet: Identity
  Function: set_subs
    Docs: Set the sub-accounts of the sender.  Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned and an amount `SubAccountDeposit` will be reserved for each item in `subs`.  The dispatch origin for this call must be _Signed_ and the sender must have a registered identity.  - `subs`: The identity's (new) sub-accounts.
    Parameters:
      - subs: unknown

Pallet: Identity
  Function: clear_identity
    Docs: Clear an account's identity info and all sub-accounts and return all deposits.  Payment: All reserved balances on the account are returned.  The dispatch origin for this call must be _Signed_ and the sender must have a registered identity.  Emits `IdentityCleared` if successful.

Pallet: Identity
  Function: request_judgement
    Docs: Request a judgement from a registrar.  Payment: At most `max_fee` will be reserved for payment to the registrar if judgement given.  The dispatch origin for this call must be _Signed_ and the sender must have a registered identity.  - `reg_index`: The index of the registrar whose judgement is requested. - `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:  ```nocompile Self::registrars().get(reg_index).unwrap().fee ```  Emits `JudgementRequested` if successful.
    Parameters:
      - reg_index: unknown
      - max_fee: unknown

Pallet: Identity
  Function: cancel_request
    Docs: Cancel a previous request.  Payment: A previously reserved deposit is returned on success.  The dispatch origin for this call must be _Signed_ and the sender must have a registered identity.  - `reg_index`: The index of the registrar whose judgement is no longer requested.  Emits `JudgementUnrequested` if successful.
    Parameters:
      - reg_index: U32

Pallet: Identity
  Function: set_fee
    Docs: Set the fee required for a judgement to be requested from a registrar.  The dispatch origin for this call must be _Signed_ and the sender must be the account of the registrar whose index is `index`.  - `index`: the index of the registrar whose fee is to be set. - `fee`: the new fee.
    Parameters:
      - index: unknown
      - fee: unknown

Pallet: Identity
  Function: set_account_id
    Docs: Change the account associated with a registrar.  The dispatch origin for this call must be _Signed_ and the sender must be the account of the registrar whose index is `index`.  - `index`: the index of the registrar whose fee is to be set. - `new`: the new account ID.
    Parameters:
      - index: unknown
      - new: sp_runtime::multiaddress::MultiAddress

Pallet: Identity
  Function: set_fields
    Docs: Set the field information for a registrar.  The dispatch origin for this call must be _Signed_ and the sender must be the account of the registrar whose index is `index`.  - `index`: the index of the registrar whose fee is to be set. - `fields`: the fields that the registrar concerns themselves with.
    Parameters:
      - index: unknown
      - fields: U64

Pallet: Identity
  Function: provide_judgement
    Docs: Provide a judgement for an account's identity.  The dispatch origin for this call must be _Signed_ and the sender must be the account of the registrar whose index is `reg_index`.  - `reg_index`: the index of the registrar whose judgement is being made. - `target`: the account whose identity the judgement is upon. This must be an account   with a registered identity. - `judgement`: the judgement of the registrar of index `reg_index` about `target`. - `identity`: The hash of the [`IdentityInformationProvider`] for that the judgement is   provided.  Note: Judgements do not apply to a username.  Emits `JudgementGiven` if successful.
    Parameters:
      - reg_index: unknown
      - target: sp_runtime::multiaddress::MultiAddress
      - judgement: pallet_identity::types::Judgement
      - identity: primitive_types::H256

Pallet: Identity
  Function: kill_identity
    Docs: Remove an account's identity and sub-account information and slash the deposits.  Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by `Slash`. Verification request deposits are not returned; they should be cancelled manually using `cancel_request`.  The dispatch origin for this call must match `T::ForceOrigin`.  - `target`: the account whose identity the judgement is upon. This must be an account   with a registered identity.  Emits `IdentityKilled` if successful.
    Parameters:
      - target: sp_runtime::multiaddress::MultiAddress

Pallet: Identity
  Function: add_sub
    Docs: Add the given account to the sender's subs.  Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated to the sender.  The dispatch origin for this call must be _Signed_ and the sender must have a registered sub identity of `sub`.
    Parameters:
      - sub: sp_runtime::multiaddress::MultiAddress
      - data: pallet_identity::types::Data

Pallet: Identity
  Function: rename_sub
    Docs: Alter the associated name of the given sub-account.  The dispatch origin for this call must be _Signed_ and the sender must have a registered sub identity of `sub`.
    Parameters:
      - sub: sp_runtime::multiaddress::MultiAddress
      - data: pallet_identity::types::Data

Pallet: Identity
  Function: remove_sub
    Docs: Remove the given account from the sender's subs.  Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated to the sender.  The dispatch origin for this call must be _Signed_ and the sender must have a registered sub identity of `sub`.
    Parameters:
      - sub: sp_runtime::multiaddress::MultiAddress

Pallet: Identity
  Function: quit_sub
    Docs: Remove the sender as a sub-account.  Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated to the sender (*not* the original depositor).  The dispatch origin for this call must be _Signed_ and the sender must have a registered super-identity.  NOTE: This should not normally be used, but is provided in the case that the non- controller of an account is maliciously registered as a sub-account.

Pallet: Identity
  Function: add_username_authority
    Docs: Add an `AccountId` with permission to grant usernames with a given `suffix` appended.  The authority can grant up to `allocation` usernames. To top up their allocation, they should just issue (or request via governance) a new `add_username_authority` call.
    Parameters:
      - authority: sp_runtime::multiaddress::MultiAddress
      - suffix: unknown
      - allocation: U32

Pallet: Identity
  Function: remove_username_authority
    Docs: Remove `authority` from the username authorities.
    Parameters:
      - authority: sp_runtime::multiaddress::MultiAddress

Pallet: Identity
  Function: set_username_for
    Docs: Set the username for `who`. Must be called by a username authority.  The authority must have an `allocation`. Users can either pre-sign their usernames or accept them later.  Usernames must:   - Only contain lowercase ASCII characters or digits.   - When combined with the suffix of the issuing authority be _less than_ the     `MaxUsernameLength`.
    Parameters:
      - who: sp_runtime::multiaddress::MultiAddress
      - username: unknown
      - signature: Option

Pallet: Identity
  Function: accept_username
    Docs: Accept a given username that an `authority` granted. The call must include the full username, as in `username.suffix`.
    Parameters:
      - username: bounded_collections::bounded_vec::BoundedVec

Pallet: Identity
  Function: remove_expired_approval
    Docs: Remove an expired username approval. The username was approved by an authority but never accepted by the user and must now be beyond its expiration. The call must include the full username, as in `username.suffix`.
    Parameters:
      - username: bounded_collections::bounded_vec::BoundedVec

Pallet: Identity
  Function: set_primary_username
    Docs: Set a given username as the primary. The username should include the suffix.
    Parameters:
      - username: bounded_collections::bounded_vec::BoundedVec

Pallet: Identity
  Function: remove_dangling_username
    Docs: Remove a username that corresponds to an account with no identity. Exists when a user gets a username but then calls `clear_identity`.
    Parameters:
      - username: bounded_collections::bounded_vec::BoundedVec

